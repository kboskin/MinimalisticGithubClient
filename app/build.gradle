apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


def CREDENTIALS_DEBUG = '../keystore/credentials-debug.properties'
def CREDENTIALS_RELEASE = '../keystore/credentials-release.properties'

def STORE_FILE = 'keystore.file'
def STORE_PASSWORD = 'keystore.password'
def KEY_ALIAS = 'key.alias'
def KEY_PASSWORD = 'key.password'

def GLOBAL_CONFIGURATION_PROPERTIES = "../configuration.properties"
def GLOBAL_CONFIGURATION_APPLICATION_ID = "application.id"

buildscript {
    repositories {
        jcenter()
    }
}

android {

    def globalConfigProperties = new Properties()
    file(GLOBAL_CONFIGURATION_PROPERTIES).withInputStream {
        globalConfigProperties.load(it)
    }

    def androidConfigurationVersion = rootProject.ext.androidVersions

    compileSdkVersion androidConfigurationVersion.androidCompileSdkVersion
    buildToolsVersion androidConfigurationVersion.androidBuildToolsVersion

    defaultConfig {
        applicationId globalConfigProperties[GLOBAL_CONFIGURATION_APPLICATION_ID]
        minSdkVersion androidConfigurationVersion.androidMinSdkVersion
        targetSdkVersion androidConfigurationVersion.androidTargetSdkVersion

        versionCode rootProject.ext.applicationVersionCode
        versionName rootProject.ext.applicationVersionName

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation": "$projectDir/schemas".toString(),
                        "room.incremental"   : "true"
                ]
            }
        }
    }

    signingConfigs {

        def credentialsDebug = new Properties()
        file(CREDENTIALS_DEBUG).withInputStream {
            credentialsDebug.load(it)
        }

        debug {
            storeFile file(credentialsDebug[STORE_FILE])
            storePassword credentialsDebug[STORE_PASSWORD]
            keyAlias credentialsDebug[KEY_ALIAS]
            keyPassword credentialsDebug[KEY_PASSWORD]
        }

        release {
            def credentialsRelease = new Properties()
            def credentialsReleaseFile = file(CREDENTIALS_RELEASE)
            def useDebugKeyIfReleaseDoesntExist = true
            if (credentialsReleaseFile.exists()) {
                credentialsReleaseFile.withInputStream { credentialsRelease.load(it) }
                println("credentials-release.properties exists")
            } else {
                if (useDebugKeyIfReleaseDoesntExist) {
                    println("credentials-release.properties doesn't exist - credentials-debug.properties will be used")
                    credentialsRelease = credentialsDebug
                } else throw new GradleException("credentials-release.properties doesn't exist")
            }

            storeFile file(credentialsRelease[STORE_FILE])
            storePassword credentialsRelease[STORE_PASSWORD]
            keyAlias credentialsRelease[KEY_ALIAS]
            keyPassword credentialsRelease[KEY_PASSWORD]
        }
    }

    buildTypes {

        all {
            ext.betaDistributionReleaseNotesFilePath =
                    file('../CHANGELOG.md').absolutePath
        }

        debug {
            signingConfig signingConfigs.release
//Sign /w release for now to be able to override leroy-1
//            signingConfig signingConfigs.debug
            buildConfigField "boolean", "IS_LOG_ENABLED", "true"
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles fileTree('proguard').asList().toArray()
            buildConfigField "boolean", "IS_LOG_ENABLED", "false"
        }
    }

    dexOptions {
        preDexLibraries = false
        dexInProcess = false
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'
        disable 'OldTargetApi'
    }
    testOptions {
        unitTests.all {
            jvmArgs '-noverify'
        }
    }
}

kapt {
    correctErrorTypes = true
}

configurations {
    all {
        resolutionStrategy {
            force "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        }
    }
}
androidExtensions {
    experimental = true
}

dependencies {
    def commonDependencies = rootProject.ext.commonDependencies
    def commonTestDependencies = rootProject.ext.commonTestDependencies

    ktlint commonDependencies.ktlint

    implementation project(':common')
    api project(':presentation')
    api project(':data')

    implementation commonDependencies.libs
    implementation commonDependencies.appCore
//    implementation commonDependencies.appCoreSecurity

    implementation commonDependencies.androidXAnnotations
    implementation commonDependencies.androidXLegacySupportV4
    implementation commonDependencies.androidXLegacySupportV13
    implementation commonDependencies.androidXCompatV7
    implementation commonDependencies.androidXRecyclerView
    implementation commonDependencies.androidXCardView
    implementation commonDependencies.supportDesign
    implementation commonDependencies.androidXVectorDrawable
    implementation commonDependencies.androidXConstraint
    implementation commonDependencies.multiDex
    implementation commonDependencies.materialDialogs
    implementation commonDependencies.room
    kapt commonDependencies.roomCompiler
    implementation commonDependencies.roomRx

    implementation commonDependencies.rxKotlin
    implementation commonDependencies.rxAndroid
    implementation commonDependencies.rxPm
    implementation commonDependencies.rxBinding
    implementation commonDependencies.rxNetwork
    implementation commonDependencies.rxPermissions

    implementation commonDependencies.javaxAnnotation
    implementation commonDependencies.javaxInject

    implementation commonDependencies.cicerone
    implementation commonDependencies.tooltipLibrary
    implementation commonDependencies.cardView

    // Dagger2
    kapt commonDependencies.daggerCompiler
    kapt commonDependencies.daggerAndroidProcessor
    implementation commonDependencies.dagger
    implementation commonDependencies.daggerAndroid
    implementation commonDependencies.daggerAndroidSupport

    implementation commonDependencies.timber
    implementation commonDependencies.inputMask
    implementation(commonDependencies.glide) {
        exclude group: "com.android.support"
    }
    kapt commonDependencies.glideProcessor

    implementation commonDependencies.retrofit
    implementation commonDependencies.retrofitConverter
    implementation commonDependencies.retrofitAdapter
    implementation commonDependencies.okHttp
    implementation commonDependencies.okHttpLogger
    implementation commonDependencies.gson

    implementation commonDependencies.threeTenABP

    implementation commonDependencies.stetho

    testImplementation commonTestDependencies.junit
    testImplementation commonTestDependencies.mockito
}

