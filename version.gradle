def GLOBAL_CONFIGURATION_PROPERTIES = "configuration.properties"
def GLOBAL_CONFIGURATION_ARCHIVE_NAME = "archive.name"

def versionCode = readBuildVersion()
def versionName = readVersionName()

ext {
    applicationVersionCode = versionCode
    applicationVersionName = versionName

    def globalConfigProperties = new Properties()
    file(GLOBAL_CONFIGURATION_PROPERTIES).withInputStream {
        globalConfigProperties.load(it)
    }

    androidZipArchiveName = "${globalConfigProperties[GLOBAL_CONFIGURATION_ARCHIVE_NAME]}${versionName}"
    archiveName = "${globalConfigProperties[GLOBAL_CONFIGURATION_ARCHIVE_NAME]}${versionName}"
}

Properties readVersion() {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {

    } finally {
        if (stream != null) stream.close()
    }

    if (!version['major']) version['major'] = 0
    if (!version['minor']) version['minor'] = 0
    if (!version['patch']) version['patch'] = 0
    if (!version['build']) version['build'] = 0
    if (!version['local-build']) version['local-build'] = 1
    return version
}

String readVersionName() {
    def version = readVersion()
    def versionName = formatVersionName(version)
    println "Version name readed: ${versionName}"
    return versionName
}

String formatVersionName(def version) {
    return "${version['major']}.${version['minor']}.${version['patch']}"
}

Integer readBuildVersion() {
    def version = readVersion()
    return version['build'] as int
}

void incrementVersionNumber(def type) {
    def version = readVersion()

    def major = version['major'] as int
    def minor = version['minor'] as int
    def patch = version['patch'] as int
    def build = version['build'] as int
    def localBuild = version['local-build'] as int

    switch (type) {
        case 'major':
            major++
            minor = 0
            patch = 0
            build++
            break
        case 'minor':
            minor++
            patch = 0
            build++
            break
        case 'patch':
            patch++
            build++
            break
        case 'build':
            build++
            break
        case 'local-build':
            localBuild++
            build++
            break
    }

    version['major'] = String.valueOf(major)
    version['minor'] = String.valueOf(minor)
    version['patch'] = String.valueOf(patch)
    version['build'] = String.valueOf(build)
    version['local-build'] = String.valueOf(localBuild)

    def versionFile = new File(project.rootDir, 'version.properties')
    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } catch (Exception e) {
        println "Std Err: ${e.message}"
    } finally {
        stream.close()
    }

    println("Version incremented: ${formatVersionName(version)}")
}

String getVersionSufix(def version) {
    def branch = readCurrentBranch()
    def build = version['build'] as int
    def localBuild = version['local-build'] as int
    def sufix = buildVersionSufix(branch, build, localBuild) as String
    return sufix
}

String readCurrentBranch() {
    def command = "git name-rev --name-only HEAD"
    def proc = command.execute([], rootDir)
    def branch = proc.text.trim()
    println "Current branch readed: $branch"
    return branch
}

String buildVersionSufix(def branch, def build, def localBuild) {
    println "Params\nbranch: ${branch}\nbuild: ${build}"
    def branchName = branch as String
    def sufix
    if (branchName.contains('develop')) {
        sufix = "beta.${build}"
    } else if (branchName.contains('release')) {
        sufix = "rc${localBuild}.${build}"
    } else if (branchName.contains('hotfix')) {
        sufix = "rc${localBuild}.${build}"
    } else if (branchName.contains('master')) {
        sufix = "release.${build}"
    } else if (branchName.startsWith('tags/')) {
        if (branchName.contains('beta')) {
            sufix = "beta.${build}"
        } else if (branchName.contains('rc')) {
            sufix = "rc${localBuild}.${build}"
        } else if (branchName.concat('hotfix')) {
            sufix = "rc${localBuild}.${build}"
        } else {
            sufix = "alpha.${build}"
        }
    } else {
        sufix = "alpha.${build}"
    }
    println "Sufix builded: $sufix"
    return sufix
}

task zipArtifacts(type: Zip) {
    from "${rootProject.projectDir}/app/build/outputs/apk/release/"
    include '*.apk'

    from "${rootProject.projectDir}/app/build/outputs/apk/debug/"
    include '*.apk'

    from rootProject.projectDir
    include 'CHANGELOG.md'

    archiveName "${androidZipArchiveName}.zip"
    destinationDir = file("artifacts")
}

task bumpMajor {
    doLast {
        incrementVersionNumber('major')
    }
    group 'version'
}

task bumpMinor {
    doLast {
        incrementVersionNumber('minor')
    }
    group 'version'
}

task bumpPatch {
    doLast {
        incrementVersionNumber('patch')
    }
    group 'version'
}

task bumpBuildNumber {
    doLast {
        incrementVersionNumber('build')
    }
    group 'version'
}

task bumpLocalBuildNumber {
    doLast {
        incrementVersionNumber('local-build')
    }
    group 'version'
}

task resetLocalBuildNumber {
    doLast {
        def version = readVersion()
        version['local-build'] = String.valueOf(1)

        def versionFile = new File(project.rootDir, 'version.properties')
        def stream = new FileOutputStream(versionFile)
        try {
            version.store(stream, null)
        } catch (Exception e) {
            println "Std Err: ${e.message}"
        } finally {
            stream.close()
        }

        println("Version changed: ${formatVersionName(version)}")
    }
    group 'version'
}